import { render, screen } from '@testing-library/react'
import { BrowserRouter } from 'react-router-dom'
import Home from '../Home'

// Wrapper para componentes que usam React Router
const renderWithRouter = (component) => {
  return render(
    <BrowserRouter>
      {component}
    </BrowserRouter>
  )
}

describe('Home Page', () => {
  test('renderiza o t√≠tulo principal', () => {
    renderWithRouter(<Home />)
    
    // Verifica se o t√≠tulo da home est√° presente (usando dados do homeData)
    const titles = screen.getAllByText(/Nova C√≥digo/i)
    expect(titles.length).toBeGreaterThan(0)
  })

  test('renderiza a se√ß√£o de servi√ßos', () => {
    renderWithRouter(<Home />)
    
    const servicesTitle = screen.getByText('Nossos Principais Servi√ßos')
    expect(servicesTitle).toBeInTheDocument()
  })

  test('renderiza todos os 4 servi√ßos principais', () => {
    renderWithRouter(<Home />)
    
    // Verifica se todos os servi√ßos est√£o presentes usando getAllByText
    const webDevElements = screen.getAllByText('Desenvolvimento Web')
    expect(webDevElements.length).toBeGreaterThan(0)
    
    const mobileElements = screen.getAllByText('Aplica√ß√µes Mobile')
    expect(mobileElements.length).toBeGreaterThan(0)
    
    const enterpriseElements = screen.getAllByText('Sistemas Empresariais')
    expect(enterpriseElements.length).toBeGreaterThan(0)
    
    const consultingElements = screen.getAllByText('Consultoria em TI')
    expect(consultingElements.length).toBeGreaterThan(0)
  })

  test('renderiza descri√ß√µes dos servi√ßos', () => {
    renderWithRouter(<Home />)
    
    // Verifica algumas descri√ß√µes dos servi√ßos usando getAllByText
    const responsivosElements = screen.getAllByText(/Criamos sites responsivos/)
    expect(responsivosElements.length).toBeGreaterThan(0)
    
    const appsElements = screen.getAllByText(/Desenvolvemos apps nativos/)
    expect(appsElements.length).toBeGreaterThan(0)
    
    const solucoesElements = screen.getAllByText(/Solu√ß√µes personalizadas/)
    expect(solucoesElements.length).toBeGreaterThan(0)
    
    const analiseElements = screen.getAllByText(/An√°lise, arquitetura/)
    expect(analiseElements.length).toBeGreaterThan(0)
  })

  test('renderiza tecnologias dos servi√ßos', () => {
    renderWithRouter(<Home />)
    
    // Verifica algumas tecnologias importantes usando getAllByText para elementos duplicados
    const reactElements = screen.getAllByText('React')
    expect(reactElements.length).toBeGreaterThan(0)
    
    const nodeElements = screen.getAllByText('Node.js')
    expect(nodeElements.length).toBeGreaterThan(0)
    
    const reactNativeElements = screen.getAllByText('React Native')
    expect(reactNativeElements.length).toBeGreaterThan(0)
    
    const flutterElements = screen.getAllByText('Flutter')
    expect(flutterElements.length).toBeGreaterThan(0)
    
    const javaElements = screen.getAllByText('Java')
    expect(javaElements.length).toBeGreaterThan(0)
    
    const springElements = screen.getAllByText('Spring')
    expect(springElements.length).toBeGreaterThan(0)
  })

  test('renderiza a se√ß√£o de features', () => {
    renderWithRouter(<Home />)
    
    const featuresTitle = screen.getByText('Por que escolher a Nova C√≥digo?')
    expect(featuresTitle).toBeInTheDocument()
  })

  test('renderiza a se√ß√£o de estat√≠sticas', () => {
    renderWithRouter(<Home />)
    
    const statsTitle = screen.getByText('N√∫meros que Importam')
    expect(statsTitle).toBeInTheDocument()
  })

  test('renderiza bot√µes de a√ß√£o', () => {
    renderWithRouter(<Home />)
    
    expect(screen.getByText('Conhe√ßa Nossos Projetos')).toBeInTheDocument()
    expect(screen.getByText('Entre em Contato')).toBeInTheDocument()
  })

  test('renderiza √≠cones dos servi√ßos', () => {
    renderWithRouter(<Home />)
    
    // Verifica se os √≠cones est√£o presentes (emojis) usando getAllByText para elementos duplicados
    const computerIcons = screen.getAllByText('üíª')
    expect(computerIcons.length).toBeGreaterThan(0)
    
    const mobileIcons = screen.getAllByText('üì±')
    expect(mobileIcons.length).toBeGreaterThan(0)
    
    const lightningIcons = screen.getAllByText('‚ö°')
    expect(lightningIcons.length).toBeGreaterThan(0)
    
    const buildingIcons = screen.getAllByText('üè¢')
    expect(buildingIcons.length).toBeGreaterThan(0)
  })

  test('renderiza imagens dos servi√ßos', () => {
    renderWithRouter(<Home />)
    
    const images = screen.getAllByRole('img')
    expect(images.length).toBeGreaterThan(0)
    
    // Verifica se as imagens t√™m alt text
    images.forEach(img => {
      expect(img).toHaveAttribute('alt')
    })
  })

  test('p√°gina tem a classe CSS correta', () => {
    renderWithRouter(<Home />)
    
    const homePage = screen.getAllByText(/Nova C√≥digo/i)[0].closest('.home-page')
    expect(homePage).toBeInTheDocument()
  })

  test('cards de servi√ßos t√™m a classe CSS correta', () => {
    renderWithRouter(<Home />)
    
    // Filtra apenas os cards de servi√ßos (excluindo os do blog)
    const serviceCards = screen.getAllByText('Ler Mais')
      .filter(button => button.closest('.service-card'))
      .map(button => button.closest('.card'))
    
    serviceCards.forEach(card => {
      expect(card).toHaveClass('service-card')
    })
  })

  test('renderiza a se√ß√£o de blog', () => {
    renderWithRouter(<Home />)
    
    // Verifica se o componente BlogNews est√° presente
    expect(screen.getByText('√öltimas do Blog')).toBeInTheDocument()
  })
}) 