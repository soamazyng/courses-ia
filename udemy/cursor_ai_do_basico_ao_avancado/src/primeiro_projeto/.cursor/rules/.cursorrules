# Regras do Cursor para Documentação de Funções

## Documentação de Funções com DocStrings

Sempre que eu solicitar a criação de funções, documente a função utilizando o DocString, explicando:

- **O que a função faz**: Descrição detalhada da funcionalidade
- **Argumentos**: Lista completa dos parâmetros com seus tipos e descrições
- **Retorno**: Tipo e descrição do valor retornado
- **Exemplos de uso**: Quando apropriado, incluir exemplos práticos
- **Exceções**: Se a função pode lançar exceções, documentá-las
- **Notas adicionais**: Qualquer informação relevante sobre comportamento, limitações ou considerações especiais

### Formato Padrão para DocStrings:

```python
def nome_da_funcao(parametro1: tipo, parametro2: tipo = valor_padrao) -> tipo_retorno:
    """
    Descrição detalhada do que a função faz.
    
    Args:
        parametro1 (tipo): Descrição detalhada do primeiro parâmetro
        parametro2 (tipo, opcional): Descrição do segundo parâmetro com valor padrão
    
    Returns:
        tipo_retorno: Descrição detalhada do que é retornado
    
    Raises:
        TipoExcecao: Descrição de quando e por que a exceção é lançada
    
    Examples:
        >>> nome_da_funcao("exemplo", 42)
        resultado_esperado
    
    Notes:
        Informações adicionais sobre comportamento, limitações ou considerações especiais.
    """
```

### Para JavaScript/TypeScript:

```javascript
/**
 * Descrição detalhada do que a função faz.
 * 
 * @param {tipo} parametro1 - Descrição detalhada do primeiro parâmetro
 * @param {tipo} [parametro2=valorPadrao] - Descrição do segundo parâmetro opcional
 * @returns {tipo} Descrição detalhada do que é retornado
 * @throws {TipoErro} Descrição de quando e por que o erro é lançado
 * 
 * @example
 * const resultado = nomeDaFuncao("exemplo", 42);
 * console.log(resultado); // resultado_esperado
 * 
 * @since 1.0.0
 * @author Seu Nome
 */
```

**IMPORTANTE**: Sempre forneça o máximo de detalhes possível para que o usuário entenda completamente o propósito, uso e comportamento da função. 


  You are an expert in TypeScript, Node.js, Next.js App Router, React, Shadcn UI, Radix UI and Tailwind.
  
  Code Style and Structure
  - Write concise, technical TypeScript code with accurate examples.
  - Use functional and declarative programming patterns; avoid classes.
  - Prefer iteration and modularization over code duplication.
  - Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
  - Structure files: exported component, subcomponents, helpers, static content, types.
  
  Naming Conventions
  - Use lowercase with dashes for directories (e.g., components/auth-wizard).
  - Favor named exports for components.
  
  TypeScript Usage
  - Use TypeScript for all code; prefer interfaces over types.
  - Avoid enums; use maps instead.
  - Use functional components with TypeScript interfaces.
  
  Syntax and Formatting
  - Use the "function" keyword for pure functions.
  - Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
  - Use declarative JSX.
  
  UI and Styling
  - Use Shadcn UI, Radix, and Tailwind for components and styling.
  - Implement responsive design with Tailwind CSS; use a mobile-first approach.
  
  Performance Optimization
  - Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
  - Wrap client components in Suspense with fallback.
  - Use dynamic loading for non-critical components.
  - Optimize images: use WebP format, include size data, implement lazy loading.
  
  Key Conventions
  - Use 'nuqs' for URL search parameter state management.
  - Optimize Web Vitals (LCP, CLS, FID).
  - Limit 'use client':
    - Favor server components and Next.js SSR.
    - Use only for Web API access in small components.
    - Avoid for data fetching or state management.
  
  Follow Next.js docs for Data Fetching, Rendering, and Routing.
  