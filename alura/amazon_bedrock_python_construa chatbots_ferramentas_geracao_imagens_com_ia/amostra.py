#!/usr/bin/env python3
"""
Arquivo de exemplo para testar conex√£o com Amazon Bedrock
Autor: Claude Code Assistant
Data: 2025-01-08
"""

import boto3
import json
from botocore.exceptions import ClientError, NoCredentialsError
from dotenv import load_dotenv
import os

# Carregar vari√°veis de ambiente do arquivo .env
load_dotenv()

def criar_cliente_bedrock(profile_name=None, region_name='us-east-1'):
    """
    Cria e retorna um cliente do Amazon Bedrock
    
    Args:
        profile_name (str): Nome do perfil AWS (opcional)
        region_name (str): Regi√£o AWS (padr√£o: us-east-1)
    
    Returns:
        boto3.client: Cliente do Amazon Bedrock
    """
    try:
        if profile_name:
            # Usar perfil espec√≠fico
            session = boto3.Session(profile_name=profile_name)
            bedrock_client = session.client('bedrock', region_name=region_name)
            print(f"‚úÖ Cliente Bedrock criado com perfil: {profile_name}")
        else:
            # Usar credenciais padr√£o ou vari√°veis de ambiente
            bedrock_client = boto3.client('bedrock', region_name=region_name)
            print(f"‚úÖ Cliente Bedrock criado com credenciais padr√£o")
        
        return bedrock_client
    
    except NoCredentialsError:
        print("‚ùå Erro: Credenciais AWS n√£o encontradas!")
        print("üí° Dica: Configure suas credenciais com 'aws configure' ou defina as vari√°veis de ambiente")
        return None
    
    except Exception as e:
        print(f"‚ùå Erro ao criar cliente Bedrock: {e}")
        return None

def listar_modelos(bedrock_client):
    """
    Lista todos os modelos dispon√≠veis no Amazon Bedrock
    
    Args:
        bedrock_client: Cliente do Amazon Bedrock
    """
    try:
        print("\nüîç Buscando modelos dispon√≠veis no Amazon Bedrock...")
        
        # Listar modelos de funda√ß√£o
        response = bedrock_client.list_foundation_models()
        
        modelos = response['modelSummaries']
        print(f"\nüìä Total de modelos encontrados: {len(modelos)}")
        print("=" * 80)
        
        # Agrupar por provedor
        provedores = {}
        for modelo in modelos:
            provedor = modelo['providerName']
            if provedor not in provedores:
                provedores[provedor] = []
            provedores[provedor].append(modelo)
        
        # Imprimir modelos organizados por provedor
        for provedor, modelos_provedor in provedores.items():
            print(f"\nüè¢ {provedor}")
            print("-" * 50)
            
            for modelo in modelos_provedor:
                print(f"üìù Nome: {modelo['modelName']}")
                print(f"üÜî ID: {modelo['modelId']}")
                print(f"üî§ Modalidades: {', '.join(modelo.get('inputModalities', []))}")
                print(f"üì§ Sa√≠da: {', '.join(modelo.get('outputModalities', []))}")
                
                # Verificar se h√° informa√ß√µes de customiza√ß√£o
                if modelo.get('customizationsSupported'):
                    print(f"üõ†Ô∏è  Customiza√ß√£o: {', '.join(modelo['customizationsSupported'])}")
                
                # Verificar se h√° informa√ß√µes de infer√™ncia
                if modelo.get('inferenceTypesSupported'):
                    print(f"‚ö° Infer√™ncia: {', '.join(modelo['inferenceTypesSupported'])}")
                
                print()
        
        return modelos
    
    except ClientError as e:
        error_code = e.response['Error']['Code']
        error_message = e.response['Error']['Message']
        
        if error_code == 'AccessDeniedException':
            print("‚ùå Erro de Acesso: Permiss√µes insuficientes para listar modelos")
            print("üí° Dica: Verifique se sua conta tem permiss√µes para bedrock:ListFoundationModels")
        else:
            print(f"‚ùå Erro da AWS: {error_code} - {error_message}")
        
        return None
    
    except Exception as e:
        print(f"‚ùå Erro inesperado ao listar modelos: {e}")
        return None

def testar_conexao_bedrock(bedrock_client):
    """
    Testa a conex√£o com o Amazon Bedrock
    
    Args:
        bedrock_client: Cliente do Amazon Bedrock
    """
    try:
        print("\nüîó Testando conex√£o com Amazon Bedrock...")
        
        # Fazer uma chamada simples para testar
        response = bedrock_client.list_foundation_models(byOutputModality='TEXT')
        
        if response['modelSummaries']:
            print("‚úÖ Conex√£o com Bedrock estabelecida com sucesso!")
            return True
        else:
            print("‚ö†Ô∏è  Conex√£o estabelecida, mas nenhum modelo de texto encontrado")
            return False
    
    except Exception as e:
        print(f"‚ùå Falha na conex√£o com Bedrock: {e}")
        return False

def main():
    """
    Fun√ß√£o principal
    """
    print("üöÄ Iniciando teste de conex√£o com Amazon Bedrock")
    print("=" * 60)
    
    # Verificar se h√° um perfil espec√≠fico definido
    profile_name = os.getenv('AWS_PROFILE', 'bedrock-curso')  # Pode ser None para usar padr√£o
    region_name = os.getenv('AWS_DEFAULT_REGION', 'us-east-1')
    
    print(f"üìç Regi√£o: {region_name}")
    if profile_name and profile_name != 'default':
        print(f"üë§ Perfil: {profile_name}")
    
    # Criar cliente Bedrock
    bedrock_client = criar_cliente_bedrock(profile_name, region_name)
    
    if bedrock_client is None:
        print("‚ùå N√£o foi poss√≠vel criar o cliente Bedrock. Encerrando...")
        return
    
    # Testar conex√£o
    if testar_conexao_bedrock(bedrock_client):
        # Listar modelos
        modelos = listar_modelos(bedrock_client)
        
        if modelos:
            print("\n" + "=" * 80)
            print("üéØ RESUMO:")
            print(f"   ‚Ä¢ Conex√£o: ‚úÖ Bem-sucedida")
            print(f"   ‚Ä¢ Regi√£o: {region_name}")
            print(f"   ‚Ä¢ Total de modelos: {len(modelos)}")
            print(f"   ‚Ä¢ Perfil usado: {profile_name if profile_name else 'padr√£o'}")
            
            # Destacar alguns modelos importantes
            modelos_importantes = [
                'anthropic.claude-3-sonnet-20240229-v1:0',
                'anthropic.claude-3-haiku-20240307-v1:0',
                'amazon.titan-text-express-v1',
                'meta.llama2-70b-chat-v1'
            ]
            
            print("\nüåü MODELOS RECOMENDADOS PARA O CURSO:")
            for modelo_id in modelos_importantes:
                for modelo in modelos:
                    if modelo['modelId'] == modelo_id:
                        print(f"   ‚Ä¢ {modelo['modelName']} ({modelo_id})")
                        break
        
        print("\n‚ú® Teste conclu√≠do com sucesso!")
    
    else:
        print("\n‚ùå Falha na conex√£o com Bedrock")
        print("\nüîß DICAS PARA RESOLVER:")
        print("   1. Verifique suas credenciais AWS")
        print("   2. Confirme se a regi√£o suporta Bedrock")
        print("   3. Verifique as permiss√µes IAM")
        print("   4. Teste com: aws bedrock list-foundation-models --region us-east-1")

if __name__ == "__main__":
    main()